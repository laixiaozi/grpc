// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package pbs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "pbs.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "pbs.HelloResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xb7, 0x5a, 0xff, 0xcd, 0xba, 0xa2, 0x73, 0x2a, 0x7b, 0x92, 0x1c, 0xc4, 0x3f, 0xb0,
	0x48, 0xfb, 0x0d, 0xea, 0x41, 0x0b, 0xea, 0xa1, 0x6b, 0x2f, 0xde, 0xb2, 0xcd, 0xa0, 0x85, 0xa6,
	0x89, 0x99, 0x54, 0xe8, 0x47, 0xf2, 0x5b, 0x4a, 0xb2, 0xad, 0x44, 0x3d, 0xf4, 0x96, 0xf7, 0xf2,
	0x9b, 0x37, 0x0f, 0x06, 0x60, 0xc9, 0xe4, 0x2a, 0xeb, 0x8c, 0x37, 0xb8, 0x6b, 0x1b, 0x2e, 0x8b,
	0x60, 0x68, 0xa3, 0x5a, 0x4f, 0x08, 0x38, 0x7e, 0xa0, 0xf9, 0xdc, 0x8c, 0xe9, 0x63, 0x49, 0xec,
	0x11, 0xa1, 0xbb, 0x90, 0x9a, 0x7a, 0x9d, 0xf3, 0xce, 0xe5, 0xd1, 0x38, 0xbe, 0xc5, 0x15, 0x14,
	0x6b, 0x86, 0xad, 0x59, 0x30, 0x61, 0x0f, 0x0e, 0x34, 0x31, 0xcb, 0xb7, 0x0d, 0xb7, 0x91, 0xfd,
	0xaf, 0x1d, 0xc8, 0x27, 0x4c, 0xae, 0x26, 0xf7, 0x39, 0x9b, 0x12, 0x0e, 0xe0, 0xb0, 0x96, 0xab,
	0x38, 0x8d, 0x67, 0x95, 0x6d, 0xb8, 0x4a, 0xb7, 0x95, 0x98, 0x5a, 0x6d, 0xb8, 0xc8, 0xf0, 0x06,
	0xf2, 0x7b, 0xf2, 0x21, 0x66, 0xb8, 0x1a, 0x29, 0xcc, 0x23, 0x14, 0xe4, 0x48, 0x95, 0xc5, 0x8f,
	0xe0, 0x27, 0xa3, 0x44, 0x86, 0x17, 0xd0, 0x7d, 0x09, 0xc5, 0x7f, 0x7f, 0xfc, 0xe7, 0xae, 0x01,
	0xee, 0x1c, 0x49, 0x4f, 0xc1, 0xfb, 0x4b, 0xa7, 0x2b, 0x44, 0x86, 0x7d, 0x38, 0xad, 0x49, 0xba,
	0xe9, 0x7b, 0xdb, 0xe1, 0x59, 0x6a, 0x4a, 0x26, 0x82, 0x4c, 0xf2, 0x1f, 0x67, 0xec, 0x45, 0x86,
	0xb7, 0x70, 0x32, 0xb1, 0x6a, 0x9d, 0x1f, 0x7b, 0x6f, 0x69, 0x34, 0xdc, 0x7b, 0x0d, 0x07, 0x69,
	0xf6, 0xe3, 0x21, 0x06, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xbe, 0x75, 0xeb, 0xaa, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	//你好世界
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	//根据id获取用户信息
	GetUserById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UsersMod, error)
	//一个测试方法,用来测试逻辑
	Test(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UsersMod, error)
	//添加用户
	CreateUser(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UserId, error)
	//搜索用户(真实姓名)
	SearchUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserList, error)
	//更新用户信息
	UpdateUserById(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UsersMod, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/pbs.UserService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UsersMod, error) {
	out := new(UsersMod)
	err := c.cc.Invoke(ctx, "/pbs.UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Test(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UsersMod, error) {
	out := new(UsersMod)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/pbs.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/pbs.UserService/SearchUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserById(ctx context.Context, in *UsersMod, opts ...grpc.CallOption) (*UsersMod, error) {
	out := new(UsersMod)
	err := c.cc.Invoke(ctx, "/pbs.UserService/UpdateUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	//你好世界
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	//根据id获取用户信息
	GetUserById(context.Context, *UserId) (*UsersMod, error)
	//一个测试方法,用来测试逻辑
	Test(context.Context, *UsersMod) (*UsersMod, error)
	//添加用户
	CreateUser(context.Context, *UsersMod) (*UserId, error)
	//搜索用户(真实姓名)
	SearchUserByName(context.Context, *UserName) (*UserList, error)
	//更新用户信息
	UpdateUserById(context.Context, *UsersMod) (*UsersMod, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedUserServiceServer) GetUserById(ctx context.Context, req *UserId) (*UsersMod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (*UnimplementedUserServiceServer) Test(ctx context.Context, req *UsersMod) (*UsersMod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (*UnimplementedUserServiceServer) CreateUser(ctx context.Context, req *UsersMod) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserServiceServer) SearchUserByName(ctx context.Context, req *UserName) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByName not implemented")
}
func (*UnimplementedUserServiceServer) UpdateUserById(ctx context.Context, req *UsersMod) (*UsersMod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserById not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Test(ctx, req.(*UsersMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UsersMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/SearchUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUserByName(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/UpdateUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserById(ctx, req.(*UsersMod))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _UserService_SayHello_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _UserService_Test_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "SearchUserByName",
			Handler:    _UserService_SearchUserByName_Handler,
		},
		{
			MethodName: "UpdateUserById",
			Handler:    _UserService_UpdateUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
